/* tslint:disable */
/* eslint-disable */
/**
 * Build a bear Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GuidRequestResponse,
  RequestResponse,
  TeddyTemplateViewDTOPagedResponseRequestResponse,
} from '../models';
import {
    GuidRequestResponseFromJSON,
    GuidRequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
    TeddyTemplateViewDTOPagedResponseRequestResponseFromJSON,
    TeddyTemplateViewDTOPagedResponseRequestResponseToJSON,
} from '../models';

export interface ApiTeddyTemplateAddPostRequest {
    file?: Blob;
    teddyName?: string;
    filename?: string;
}

export interface ApiTeddyTemplateDeleteByIdIdDeleteRequest {
    id: string;
}

export interface ApiTeddyTemplateGetByIdIdGetRequest {
    id: string;
}

export interface ApiTeddyTemplateGetGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class TeddyTemplateApi extends runtime.BaseAPI {

    /**
     */
    async apiTeddyTemplateAddPostRaw(requestParameters: ApiTeddyTemplateAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuidRequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('File', requestParameters.file as any);
        }

        if (requestParameters.teddyName !== undefined) {
            formParams.append('TeddyName', requestParameters.teddyName as any);
        }

        if (requestParameters.filename !== undefined) {
            formParams.append('Filename', requestParameters.filename as any);
        }

        const response = await this.request({
            path: `/api/TeddyTemplate/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuidRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeddyTemplateAddPost(requestParameters: ApiTeddyTemplateAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuidRequestResponse> {
        const response = await this.apiTeddyTemplateAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTeddyTemplateDeleteByIdIdDeleteRaw(requestParameters: ApiTeddyTemplateDeleteByIdIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiTeddyTemplateDeleteByIdIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TeddyTemplate/DeleteById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeddyTemplateDeleteByIdIdDelete(requestParameters: ApiTeddyTemplateDeleteByIdIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiTeddyTemplateDeleteByIdIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTeddyTemplateGetByIdIdGetRaw(requestParameters: ApiTeddyTemplateGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiTeddyTemplateGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TeddyTemplate/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async apiTeddyTemplateGetByIdIdGet(requestParameters: ApiTeddyTemplateGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.apiTeddyTemplateGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTeddyTemplateGetGetRaw(requestParameters: ApiTeddyTemplateGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeddyTemplateViewDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TeddyTemplate/Get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeddyTemplateViewDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeddyTemplateGetGet(requestParameters: ApiTeddyTemplateGetGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeddyTemplateViewDTOPagedResponseRequestResponse> {
        const response = await this.apiTeddyTemplateGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
